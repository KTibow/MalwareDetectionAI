import Neataptic from "neataptic";
import { readFile, writeFile } from "fs/promises";

const rats = [
  await readFile("rats/decompressed_AH-Flip_and_Dupe.jar"),
  await readFile("rats/decompressed_Auto-Mining Mod 2.0.jar"),
  await readFile("rats/decompressed_DungeonQOL.jar"),
  await readFile("rats/decompressed_sbe cracked 2.0.jar"),
];
const clean = [
  await readFile("not rats/decompressed_Apec-1.10.1.jar"),
  await readFile("not rats/decompressed_BazaarNotifier-1.4.11.jar"),
  await readFile("not rats/decompressed_cheeto_dust.jar"),
  await readFile("not rats/decompressed_NotEnoughUpdates-2.0.0.jar"),
];

/**
 * @param {import("neataptic").Network} network
 * @param {number[]} input
 * @returns number
 */
const runNetwork = (network, input) => {
  let memory = [0, 0, 0, 0];
  let score = 0;
  const chunkSize = 6;
  for (let i = 0; i < input.length; i += chunkSize) {
    const chunk = input.slice(i, i + chunkSize);
    const output = network.activate([...chunk, ...memory]);
    score = output[0];
    memory = output.slice(1);
  }
  return score;
};
const evaluateNetwork = (network) => {
  const ratScores = rats.map((i) => runNetwork(network, i));
  const cleanScores = clean.map((i) => runNetwork(network, i));
  const ratAvg = ratScores.reduce((a, b) => a + b, 0) / rats.length;
  const cleanAvg = cleanScores.reduce((a, b) => a + b, 0) / clean.length;
  console.log("rat", ratAvg, "clean", cleanAvg);
  return ratAvg - cleanAvg;
};
const neat = new Neataptic.Neat(10, 5, (networks) => networks.map(evaluateNetwork), {
  fitnessPopulation: true,
});

for (let iterations = 0; iterations < 100; iterations++) {
  console.log("=== NEW GENERATION ===");
  await neat.evolve();
  const population = neat.export();
  await writeFile(`models-${iterations}.json`, JSON.stringify(population));
}
